window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "appstate", "modulename": "appstate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "appstate.AppState", "modulename": "appstate", "qualname": "AppState", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "appstate.AppState.voice_handler", "modulename": "appstate", "qualname": "AppState.voice_handler", "kind": "variable", "doc": "<p></p>\n", "annotation": ": voice_handler.VoiceHandler"}, {"fullname": "appstate.AppState.intention_classifier", "modulename": "appstate", "qualname": "AppState.intention_classifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": intention_classifier.IntentionClassifier"}, {"fullname": "appstate.AppState.assistant", "modulename": "appstate", "qualname": "AppState.assistant", "kind": "variable", "doc": "<p></p>\n", "annotation": ": assistant.Assistant"}, {"fullname": "appstate.AppState.settings", "modulename": "appstate", "qualname": "AppState.settings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": settings.Settings"}, {"fullname": "assistant", "modulename": "assistant", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "assistant.Assistant", "modulename": "assistant", "qualname": "Assistant", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "assistant.Assistant.__init__", "modulename": "assistant", "qualname": "Assistant.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gender</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;Female&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Male&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">voice_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gpt_model</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">use_chat</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">gpt_info</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">external_capabilities</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">assistant_function</span><span class=\"o\">.</span><span class=\"n\">AssistantFunction</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span>)</span>"}, {"fullname": "assistant.Assistant.name", "modulename": "assistant", "qualname": "Assistant.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "assistant.Assistant.gender", "modulename": "assistant", "qualname": "Assistant.gender", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;Female&#x27;, &#x27;Male&#x27;]", "default_value": "&#x27;Female&#x27;"}, {"fullname": "assistant.Assistant.voice_key", "modulename": "assistant", "qualname": "Assistant.voice_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "assistant.Assistant.capabilities", "modulename": "assistant", "qualname": "Assistant.capabilities", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, assistant_function.AssistantFunction]", "default_value": "{}"}, {"fullname": "assistant.Assistant.failure", "modulename": "assistant", "qualname": "Assistant.failure", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable[[appstate.AppState], NoneType]]", "default_value": "None"}, {"fullname": "assistant.Assistant.gpt_model", "modulename": "assistant", "qualname": "Assistant.gpt_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": gpt4all.gpt4all.GPT4All"}, {"fullname": "assistant.Assistant.ai_messages", "modulename": "assistant", "qualname": "Assistant.ai_messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": queue.Queue[typing.Union[openai.types.chat.chat_completion_system_message_param.ChatCompletionSystemMessageParam, openai.types.chat.chat_completion_user_message_param.ChatCompletionUserMessageParam, openai.types.chat.chat_completion_assistant_message_param.ChatCompletionAssistantMessageParam, openai.types.chat.chat_completion_tool_message_param.ChatCompletionToolMessageParam, openai.types.chat.chat_completion_function_message_param.ChatCompletionFunctionMessageParam]]"}, {"fullname": "assistant.Assistant.current_request", "modulename": "assistant", "qualname": "Assistant.current_request", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "assistant.Assistant.chat_mode", "modulename": "assistant", "qualname": "Assistant.chat_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "assistant.Assistant.use_chat", "modulename": "assistant", "qualname": "Assistant.use_chat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "assistant.Assistant.gpt_info", "modulename": "assistant", "qualname": "Assistant.gpt_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "assistant.Assistant.handle_request", "modulename": "assistant", "qualname": "Assistant.handle_request", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.assistant_failure", "modulename": "assistant", "qualname": "Assistant.assistant_failure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.task_activate", "modulename": "assistant", "qualname": "Assistant.task_activate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.task_bye", "modulename": "assistant", "qualname": "Assistant.task_bye", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.task_start_discussion", "modulename": "assistant", "qualname": "Assistant.task_start_discussion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.task_stop_discussion", "modulename": "assistant", "qualname": "Assistant.task_stop_discussion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.handle_gpt", "modulename": "assistant", "qualname": "Assistant.handle_gpt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">history</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_system_message_param</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionSystemMessageParam</span><span class=\"p\">,</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_user_message_param</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionUserMessageParam</span><span class=\"p\">,</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_assistant_message_param</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionAssistantMessageParam</span><span class=\"p\">,</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_tool_message_param</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionToolMessageParam</span><span class=\"p\">,</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_function_message_param</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionFunctionMessageParam</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">system_prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">add_gpt_info</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">Stream</span><span class=\"p\">[</span><span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_chunk</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionChunk</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.task_chat", "modulename": "assistant", "qualname": "Assistant.task_chat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant.Assistant.task_forget_chat", "modulename": "assistant", "qualname": "Assistant.task_forget_chat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "assistant_function", "modulename": "assistant_function", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "assistant_function.AssistantFunction", "modulename": "assistant_function", "qualname": "AssistantFunction", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "assistant_function.AssistantFunction.__init__", "modulename": "assistant_function", "qualname": "AssistantFunction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">reaction</span><span class=\"p\">:</span> <span class=\"n\">assistant_function</span><span class=\"o\">.</span><span class=\"n\">AssistantFunction</span><span class=\"o\">.</span><span class=\"n\">StateFunction</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "assistant_function.AssistantFunction.StateFunction", "modulename": "assistant_function", "qualname": "AssistantFunction.StateFunction", "kind": "class", "doc": "<p>Base class for protocol classes.</p>\n\n<p>Protocol classes are defined as::</p>\n\n<pre><code>class Proto(Protocol):\n    def meth(self) -&gt; int:\n        ...\n</code></pre>\n\n<p>Such classes are primarily used with static type checkers that recognize\nstructural subtyping (static duck-typing).</p>\n\n<p>For example::</p>\n\n<pre><code>class C:\n    def meth(self) -&gt; int:\n        return 0\n\ndef func(x: Proto) -&gt; int:\n    return x.meth()\n\nfunc(C())  # Passes static type check\n</code></pre>\n\n<p>See PEP 544 for details. Protocol classes decorated with\n@typing.runtime_checkable act as simple-minded runtime protocols that check\nonly the presence of given attributes, ignoring their type signatures.\nProtocol classes can be generic, they are defined as::</p>\n\n<pre><code>class GenProto[T](Protocol):\n    def meth(self) -&gt; T:\n        ...\n</code></pre>\n", "bases": "typing.Protocol"}, {"fullname": "assistant_function.AssistantFunction.StateFunction.__init__", "modulename": "assistant_function", "qualname": "AssistantFunction.StateFunction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "assistant_function.AssistantFunction.keys", "modulename": "assistant_function", "qualname": "AssistantFunction.keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "assistant_function.AssistantFunction.reaction", "modulename": "assistant_function", "qualname": "AssistantFunction.reaction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": assistant_function.AssistantFunction.StateFunction | None", "default_value": "None"}, {"fullname": "icy", "modulename": "icy", "kind": "module", "doc": "<p>Icy is a local hosted assistant, with the main purpose - to make your daily routines\neasier. It uses TTS / STT engines with GPT capabilities to help you with any troubles\nyou would meet on your way using the computer.</p>\n\n<p>This is the main starting file, containing the entry point, command line argument\nparsing, and general bot initializing code.</p>\n"}, {"fullname": "icy.parse_args", "modulename": "icy", "qualname": "parse_args", "kind": "function", "doc": "<p>Parses the command line arguments and loads the translations for the first time.</p>\n\n<p>The arguments might be:</p>\n\n<ul>\n<li><strong>--language</strong> (<strong>-l</strong>) [auto] - sets the language code that will be used in the\nweb site (and in the bot's commands, if won't be overwritten).</li>\n</ul>\n\n<p>Aaand yeah, it's all the arguments for now :)</p>\n\n<p><em>Raises</em>: Doesn't raise itself or handle any exceptions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "icy.init", "modulename": "icy", "qualname": "init", "kind": "function", "doc": "<p>Initializes the bot using the configuration dictionary (it should contain only keys\npresented in the <a href=\"settings.html\"><code>Setting</code></a> class instances as attirbutes).</p>\n\n<p>Also, reloads the translations (a chanse for a user to change the languages before\nthe bot actually starts.)</p>\n\n<p>Returns the <a href=\"appstate.html\"><code>AppState</code></a> instance ready to run the bot.</p>\n\n<p><em>Raises</em>: Doesn't raise any exceptions itself. Handles all the instances of\n<code>Exception</code> while attempting to initialize the additional modules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">calculated_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span>:</span></span>", "funcdef": "def"}, {"fullname": "icy.start", "modulename": "icy", "qualname": "start", "kind": "function", "doc": "<p>The entry point for Icy assistant. Starts, initializes, runs and shutdowns the\nexecution of the bot.</p>\n\n<p><em>Raises</em>: Nothing itself, also doesn't handle any exception.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">NoReturn</span>:</span></span>", "funcdef": "def"}, {"fullname": "intention_classifier", "modulename": "intention_classifier", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "intention_classifier.IntentionClassifier", "modulename": "intention_classifier", "qualname": "IntentionClassifier", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "intention_classifier.IntentionClassifier.__init__", "modulename": "intention_classifier", "qualname": "IntentionClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span>)</span>"}, {"fullname": "intention_classifier.IntentionClassifier.state", "modulename": "intention_classifier", "qualname": "IntentionClassifier.state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": appstate.AppState"}, {"fullname": "intention_classifier.IntentionClassifier.vectorizer", "modulename": "intention_classifier", "qualname": "IntentionClassifier.vectorizer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sklearn.feature_extraction.text.TfidfVectorizer"}, {"fullname": "intention_classifier.IntentionClassifier.classifier_proba", "modulename": "intention_classifier", "qualname": "IntentionClassifier.classifier_proba", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sklearn.linear_model._logistic.LogisticRegression"}, {"fullname": "intention_classifier.IntentionClassifier.classifier", "modulename": "intention_classifier", "qualname": "IntentionClassifier.classifier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sklearn.svm._classes.LinearSVC"}, {"fullname": "intention_classifier.IntentionClassifier.classify", "modulename": "intention_classifier", "qualname": "IntentionClassifier.classify", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "message_window", "modulename": "message_window", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "message_window.MessageWindow", "modulename": "message_window", "qualname": "MessageWindow", "kind": "class", "doc": "<p>A class that represents a thread of control.</p>\n\n<p>This class can be safely subclassed in a limited fashion. There are two ways\nto specify the activity: by passing a callable object to the constructor, or\nby overriding the run() method in a subclass.</p>\n", "bases": "threading.Thread"}, {"fullname": "message_window.MessageWindow.__init__", "modulename": "message_window", "qualname": "MessageWindow.__init__", "kind": "function", "doc": "<p>This constructor should always be called with keyword arguments. Arguments are:</p>\n\n<p><em>group</em> should be None; reserved for future extension when a ThreadGroup\nclass is implemented.</p>\n\n<p><em>target</em> is the callable object to be invoked by the run()\nmethod. Defaults to None, meaning nothing is called.</p>\n\n<p><em>name</em> is the thread name. By default, a unique name is constructed of\nthe form \"Thread-N\" where N is a small decimal number.</p>\n\n<p><em>args</em> is a list or tuple of arguments for the target invocation. Defaults to ().</p>\n\n<p><em>kwargs</em> is a dictionary of keyword arguments for the target\ninvocation. Defaults to {}.</p>\n\n<p>If a subclass overrides the constructor, it must make sure to invoke\nthe base class constructor (Thread.__init__()) before doing anything\nelse to the thread.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">speak_worker</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">SimpleNamespace</span>,</span><span class=\"param\">\t<span class=\"n\">symbols_per_line</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">40</span></span>)</span>"}, {"fullname": "message_window.MessageWindow.text", "modulename": "message_window", "qualname": "MessageWindow.text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, Callable[[], str]]"}, {"fullname": "message_window.MessageWindow.show", "modulename": "message_window", "qualname": "MessageWindow.show", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[], bool]"}, {"fullname": "message_window.MessageWindow.symbols_per_line", "modulename": "message_window", "qualname": "MessageWindow.symbols_per_line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "message_window.MessageWindow.speak_worker", "modulename": "message_window", "qualname": "MessageWindow.speak_worker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": types.SimpleNamespace"}, {"fullname": "message_window.MessageWindow.root", "modulename": "message_window", "qualname": "MessageWindow.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tkinter.Tk"}, {"fullname": "message_window.MessageWindow.popup_menu", "modulename": "message_window", "qualname": "MessageWindow.popup_menu", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tkinter.Menu"}, {"fullname": "message_window.MessageWindow.terminate", "modulename": "message_window", "qualname": "MessageWindow.terminate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "message_window.MessageWindow.popup", "modulename": "message_window", "qualname": "MessageWindow.popup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Event[Misc]&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "message_window.MessageWindow.run", "modulename": "message_window", "qualname": "MessageWindow.run", "kind": "function", "doc": "<p>Method representing the thread's activity.</p>\n\n<p>You may override this method in a subclass. The standard run() method\ninvokes the callable object passed to the object's constructor as the\ntarget argument, if any, with sequential and keyword arguments taken\nfrom the args and kwargs arguments, respectively.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "module_interface", "modulename": "module_interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "module_interface.ModuleInterface", "modulename": "module_interface", "qualname": "ModuleInterface", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "module_interface.ModuleInterface.__init__", "modulename": "module_interface", "qualname": "ModuleInterface.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span>)</span>"}, {"fullname": "module_interface.ModuleInterface.state", "modulename": "module_interface", "qualname": "ModuleInterface.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "module_interface.ModuleInterface.module_config", "modulename": "module_interface", "qualname": "ModuleInterface.module_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "module_interface.ModuleInterface.get_function", "modulename": "module_interface", "qualname": "ModuleInterface.get_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">assistant_function</span><span class=\"o\">.</span><span class=\"n\">AssistantFunction</span>:</span></span>", "funcdef": "def"}, {"fullname": "settings", "modulename": "settings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "settings.Gender", "modulename": "settings", "qualname": "Gender", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Literal[&#x27;Female&#x27;, &#x27;Male&#x27;]"}, {"fullname": "settings.OpenAITTSVoice", "modulename": "settings", "qualname": "OpenAITTSVoice", "kind": "variable", "doc": "<p>Voices which are avaliable for use with OpenAI TTS API.</p>\n", "default_value": "typing.Literal[&#x27;alloy&#x27;, &#x27;echo&#x27;, &#x27;fable&#x27;, &#x27;onyx&#x27;, &#x27;nova&#x27;, &#x27;shimmer&#x27;]"}, {"fullname": "settings.Settings", "modulename": "settings", "qualname": "Settings", "kind": "class", "doc": "<p>Class Settings contains all the properties used in the assistant.\nAlso, it's being used to pass the parameters from the configuration\nweb page to the bot.</p>\n"}, {"fullname": "settings.Settings.__init__", "modulename": "settings", "qualname": "Settings.__init__", "kind": "function", "doc": "<p>Takes dictionary containing the pairs key/value with same keys as the\nattributes in the <code>Setting</code> class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">calculated_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "settings.Settings.language", "modulename": "settings", "qualname": "Settings.language", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;english&#x27;"}, {"fullname": "settings.Settings.assistant_name", "modulename": "settings", "qualname": "Settings.assistant_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;Assistant&#x27;"}, {"fullname": "settings.Settings.assistant_gender", "modulename": "settings", "qualname": "Settings.assistant_gender", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;Female&#x27;, &#x27;Male&#x27;]", "default_value": "&#x27;Female&#x27;"}, {"fullname": "settings.Settings.assistant_voice_key", "modulename": "settings", "qualname": "Settings.assistant_voice_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;Zira&#x27;"}, {"fullname": "settings.Settings.assistant_voice_rate", "modulename": "settings", "qualname": "Settings.assistant_voice_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "200"}, {"fullname": "settings.Settings.vosk_model", "modulename": "settings", "qualname": "Settings.vosk_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "settings.Settings.vosk_debug", "modulename": "settings", "qualname": "Settings.vosk_debug", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "settings.Settings.use_chat", "modulename": "settings", "qualname": "Settings.use_chat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "settings.Settings.gpt_model", "modulename": "settings", "qualname": "Settings.gpt_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "settings.Settings.use_openai_gpt", "modulename": "settings", "qualname": "Settings.use_openai_gpt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "settings.Settings.use_openai_tts", "modulename": "settings", "qualname": "Settings.use_openai_tts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "settings.Settings.openai_tts_model", "modulename": "settings", "qualname": "Settings.openai_tts_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;alloy&#x27;, &#x27;echo&#x27;, &#x27;fable&#x27;, &#x27;onyx&#x27;, &#x27;nova&#x27;, &#x27;shimmer&#x27;]", "default_value": "&#x27;nova&#x27;"}, {"fullname": "settings.Settings.gpt_info", "modulename": "settings", "qualname": "Settings.gpt_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "settings.Settings.modules_states", "modulename": "settings", "qualname": "Settings.modules_states", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, bool]", "default_value": "{}"}, {"fullname": "settings.Settings.intention_best_proba", "modulename": "settings", "qualname": "Settings.intention_best_proba", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.5"}, {"fullname": "translations", "modulename": "translations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "translations.Translations", "modulename": "translations", "qualname": "Translations", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "typing.Iterable[str]"}, {"fullname": "translations.Translations.update", "modulename": "translations", "qualname": "Translations.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_translations</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "translations.Translations.as_dict", "modulename": "translations", "qualname": "Translations.as_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "translations.translations", "modulename": "translations", "qualname": "translations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": translations.Translations", "default_value": "&lt;translations.Translations object&gt;"}, {"fullname": "voice_handler", "modulename": "voice_handler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "voice_handler.VoiceHandler", "modulename": "voice_handler", "qualname": "VoiceHandler", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "voice_handler.VoiceHandler.__init__", "modulename": "voice_handler", "qualname": "VoiceHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vosk_model</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vosk_debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">voice_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">voice_rate</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">openai_tts_model</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;alloy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;echo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fable&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;onyx&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nova&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;shimmer&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">use_openai_tts</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "voice_handler.VoiceHandler.StopRecording", "modulename": "voice_handler", "qualname": "VoiceHandler.StopRecording", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "voice_handler.VoiceHandler.tts_engine", "modulename": "voice_handler", "qualname": "VoiceHandler.tts_engine", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pyttsx3.engine.Engine"}, {"fullname": "voice_handler.VoiceHandler.model", "modulename": "voice_handler", "qualname": "VoiceHandler.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": vosk.Model"}, {"fullname": "voice_handler.VoiceHandler.recording_queue", "modulename": "voice_handler", "qualname": "VoiceHandler.recording_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": queue.Queue[bytes]"}, {"fullname": "voice_handler.VoiceHandler.recording_lock", "modulename": "voice_handler", "qualname": "VoiceHandler.recording_lock", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;built-in function allocate_lock&gt;"}, {"fullname": "voice_handler.VoiceHandler.vosk_debug", "modulename": "voice_handler", "qualname": "VoiceHandler.vosk_debug", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "voice_handler.VoiceHandler.openai_tts_model", "modulename": "voice_handler", "qualname": "VoiceHandler.openai_tts_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;alloy&#x27;, &#x27;echo&#x27;, &#x27;fable&#x27;, &#x27;onyx&#x27;, &#x27;nova&#x27;, &#x27;shimmer&#x27;]"}, {"fullname": "voice_handler.VoiceHandler.use_openai_tts", "modulename": "voice_handler", "qualname": "VoiceHandler.use_openai_tts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "voice_handler.VoiceHandler.speak_worker", "modulename": "voice_handler", "qualname": "VoiceHandler.speak_worker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": types.SimpleNamespace"}, {"fullname": "voice_handler.VoiceHandler.generate_speech", "modulename": "voice_handler", "qualname": "VoiceHandler.generate_speech", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "voice_handler.VoiceHandler.play_speech", "modulename": "voice_handler", "qualname": "VoiceHandler.play_speech", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "voice_handler.VoiceHandler.say", "modulename": "voice_handler", "qualname": "VoiceHandler.say", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">Stream</span><span class=\"p\">[</span><span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_completion_chunk</span><span class=\"o\">.</span><span class=\"n\">ChatCompletionChunk</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "voice_handler.VoiceHandler.record", "modulename": "voice_handler", "qualname": "VoiceHandler.record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">appstate</span><span class=\"o\">.</span><span class=\"n\">AppState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.handler", "modulename": "web.handler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "web.handler.ServerPhase", "modulename": "web.handler", "qualname": "ServerPhase", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Literal[&#x27;Configuration&#x27;, &#x27;Starting&#x27;, &#x27;Runtime&#x27;]"}, {"fullname": "web.handler.Handler", "modulename": "web.handler", "qualname": "Handler", "kind": "class", "doc": "<p>HTTP request handler base class.</p>\n\n<p>The following explanation of HTTP serves to guide you through the\ncode as well as to expose any misunderstandings I may have about\nHTTP (so you don't need to read the code to figure out I'm wrong\n:-).</p>\n\n<p>HTTP (HyperText Transfer Protocol) is an extensible protocol on\ntop of a reliable stream transport (e.g. TCP/IP).  The protocol\nrecognizes three parts to a request:</p>\n\n<ol>\n<li>One line identifying the request type and path</li>\n<li>An optional set of RFC-822-style headers</li>\n<li>An optional data part</li>\n</ol>\n\n<p>The headers and data are separated by a blank line.</p>\n\n<p>The first line of the request has the form</p>\n\n<p><command> <path> <version></p>\n\n<p>where <command> is a (case-sensitive) keyword such as GET or POST,\n<path> is a string containing path information for the request,\nand <version> should be the string \"HTTP/1.0\" or \"HTTP/1.1\".\n<path> is encoded using the URL encoding scheme (using %xx to signify\nthe ASCII character with hex code xx).</p>\n\n<p>The specification specifies that lines are separated by CRLF but\nfor compatibility with the widest range of clients recommends\nservers also handle LF.  Similarly, whitespace in the request line\nis treated sensibly (allowing multiple spaces between components\nand allowing trailing whitespace).</p>\n\n<p>Similarly, for output, lines ought to be separated by CRLF pairs\nbut most clients grok LF characters just fine.</p>\n\n<p>If the first line of the request has the form</p>\n\n<p><command> <path></p>\n\n<p>(i.e. <version> is left out) then this is assumed to be an HTTP\n0.9 request; this form has no optional headers and data part and\nthe reply consists of just the data.</p>\n\n<p>The reply form of the HTTP 1.x protocol again has three parts:</p>\n\n<ol>\n<li>One line giving the response code</li>\n<li>An optional set of RFC-822-style headers</li>\n<li>The data</li>\n</ol>\n\n<p>Again, the headers and data are separated by a blank line.</p>\n\n<p>The response code line has the form</p>\n\n<p><version> <responsecode> <responsestring></p>\n\n<p>where <version> is the protocol version (\"HTTP/1.0\" or \"HTTP/1.1\"),\n<responsecode> is a 3-digit response code indicating success or\nfailure of the request, and <responsestring> is an optional\nhuman-readable string explaining what the response code means.</p>\n\n<p>This server parses the request and the headers, and then calls a\nfunction specific to the request type (<command>).  Specifically,\na request SPAM will be handled by a method do_SPAM().  If no\nsuch method exists the server sends an error response to the\nclient.  If it exists, it is called with no arguments:</p>\n\n<p>do_SPAM()</p>\n\n<p>Note that the request name is case sensitive (i.e. SPAM and spam\nare different requests).</p>\n\n<p>The various request details are stored in instance variables:</p>\n\n<ul>\n<li><p>client_address is the client IP address in the form (host,\nport);</p></li>\n<li><p>command, path and version are the broken-down request line;</p></li>\n<li><p>headers is an instance of email.message.Message (or a derived\nclass) containing the header information;</p></li>\n<li><p>rfile is a file object open for reading positioned at the\nstart of the optional input data part;</p></li>\n<li><p>wfile is a file object open for writing.</p></li>\n</ul>\n\n<p>IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!</p>\n\n<p>The first thing to be written must be the response line.  Then\nfollow 0 or more header lines, then a blank line, and then the\nactual data (if any).  The meaning of the header lines depends on\nthe command executed by the server; in most cases, when data is\nreturned, there should be at least one header line of the form</p>\n\n<p>Content-type: <type>/<subtype></p>\n\n<p>where <type> and <subtype> should be registered MIME types,\ne.g. \"text/html\" or \"text/plain\".</p>\n", "bases": "http.server.BaseHTTPRequestHandler"}, {"fullname": "web.handler.Handler.__init__", "modulename": "web.handler", "qualname": "Handler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">client_address</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">socketserver</span><span class=\"o\">.</span><span class=\"n\">BaseServer</span></span>)</span>"}, {"fullname": "web.handler.Handler.translations", "modulename": "web.handler", "qualname": "Handler.translations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": translations.Translations"}, {"fullname": "web.handler.Handler.result_config", "modulename": "web.handler", "qualname": "Handler.result_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "web.handler.Handler.config_lock", "modulename": "web.handler", "qualname": "Handler.config_lock", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;built-in function allocate_lock&gt;"}, {"fullname": "web.handler.Handler.server_phase", "modulename": "web.handler", "qualname": "Handler.server_phase", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Literal[&#x27;Configuration&#x27;, &#x27;Starting&#x27;, &#x27;Runtime&#x27;]"}, {"fullname": "web.handler.Handler.tts_engine", "modulename": "web.handler", "qualname": "Handler.tts_engine", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pyttsx3.engine.Engine"}, {"fullname": "web.handler.Handler.output", "modulename": "web.handler", "qualname": "Handler.output", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bytes"}, {"fullname": "web.handler.Handler.send_redirect", "modulename": "web.handler", "qualname": "Handler.send_redirect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.handler.Handler.send_headers", "modulename": "web.handler", "qualname": "Handler.send_headers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">200</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.handler.Handler.do_HEAD", "modulename": "web.handler", "qualname": "Handler.do_HEAD", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.handler.Handler.do_POST_routing", "modulename": "web.handler", "qualname": "Handler.do_POST_routing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.handler.Handler.do_GET", "modulename": "web.handler", "qualname": "Handler.do_GET", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.handler.Handler.do_POST", "modulename": "web.handler", "qualname": "Handler.do_POST", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "web.server", "modulename": "web.server", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "web.server.WebServer", "modulename": "web.server", "qualname": "WebServer", "kind": "class", "doc": "<p>Mix-in class to handle each request in a new thread.</p>\n", "bases": "http.server.ThreadingHTTPServer"}, {"fullname": "web.server.WebServer.__init__", "modulename": "web.server", "qualname": "WebServer.__init__", "kind": "function", "doc": "<p>Constructor.  May be extended, do not override.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">translations</span><span class=\"p\">:</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">Translations</span>,</span><span class=\"param\">\t<span class=\"n\">result_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "web.server.WebServer.lock", "modulename": "web.server", "qualname": "WebServer.lock", "kind": "variable", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();