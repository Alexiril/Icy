from pathlib import Path
from typing import Any, BinaryIO, Callable, overload
from _cffi_backend import Lib
from tqdm import tqdm

MODEL_PRE_URL: str = ...
MODEL_LIST_URL: str = ...
MODEL_DIRS: list[str] = ...

def open_dll() -> Lib: ...
def list_models() -> None: ...
def list_languages() -> None: ...

class Model:
    def __init__(
        self,
        model_path: str | None = None,
        model_name: str | None = None,
        lang: str | None = None,
    ) -> None: ...
    def vosk_model_find_word(self, word: str) -> Any: ...
    def get_model_path(self, model_name: str, lang: str) -> str: ...
    def get_model_by_name(self, model_name: str) -> Path: ...
    def get_model_by_lang(self, lang: str) -> Path: ...
    def download_model(self, model_name: str) -> None: ...
    def download_progress_hook(self, t: tqdm[Any]) -> Callable[..., Any]: ...

class SpkModel:
    def __init__(self, model_path: str) -> None: ...

class KaldiRecognizer:
    @overload
    def __init__(self, model: Model, samplerate: int) -> None: ...
    @overload
    def __init__(self, model: Model, samplerate: int, grm: str) -> None: ...
    @overload
    def __init__(self, model: Model, samplerate: int, spk: SpkModel) -> None: ...
    def SetMaxAlternatives(self, max_alternatives: int) -> None: ...
    def SetWords(self, enable_words: bool) -> None: ...
    def SetPartialWords(self, enable_partial_words: bool) -> None: ...
    def SetNLSML(self, enable_nlsml: bool) -> None: ...
    def SetSpkModel(self, spk_model: SpkModel) -> None: ...
    def SetGrammar(self, grammar: str) -> None: ...
    def AcceptWaveform(self, data: bytes) -> bool: ...
    def Result(self) -> str: ...
    def PartialResult(self) -> str: ...
    def FinalResult(self) -> str: ...
    def Reset(self) -> None: ...
    def SrtResult(self, stream: BinaryIO, words_per_line: int = 7) -> Any: ...

def SetLogLevel(level: int) -> None: ...
def GpuInit() -> None: ...
def GpuThreadInit() -> None: ...

class BatchModel:
    def __init__(self, model_path: str) -> None: ...
    def Wait(self) -> None: ...

class BatchRecognizer:
    def __init__(self, model: BatchModel, sample_frequency: float) -> None: ...
    def AcceptWaveform(self, data: bytes) -> None: ...
    def Result(self) -> str: ...
    def FinishStream(self) -> None: ...
    def GetPendingChunks(self) -> int: ...
